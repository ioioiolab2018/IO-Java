<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2000</stringProp>
        <stringProp name="ThreadGroup.ramp_time">2</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
          <stringProp name="RandomTimer.range">1000.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion: 201 CREATED" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49587">201</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;name&quot;: &quot;pariatur&quot;,&#xd;
    &quot;nodeType&quot;: &quot;ENTRY&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: []&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 1,&#xd;
    &quot;name&quot;: &quot;non&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 2,&#xd;
    &quot;name&quot;: &quot;cupidatat&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 3,&#xd;
    &quot;name&quot;: &quot;elit&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 4,&#xd;
    &quot;name&quot;: &quot;deserunt&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 5,&#xd;
    &quot;name&quot;: &quot;culpa&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 6,&#xd;
    &quot;name&quot;: &quot;koniec&quot;,&#xd;
    &quot;nodeType&quot;: &quot;EXIT&quot;,&#xd;
    &quot;outgoing&quot;: [],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">7070</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/saveNetwork</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
            <intProp name="InterleaveControl.style">1</intProp>
          </RandomController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Greedy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;name&quot;: &quot;pariatur&quot;,&#xd;
    &quot;nodeType&quot;: &quot;ENTRY&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: []&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 1,&#xd;
    &quot;name&quot;: &quot;non&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 2,&#xd;
    &quot;name&quot;: &quot;cupidatat&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 3,&#xd;
    &quot;name&quot;: &quot;elit&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 4,&#xd;
    &quot;name&quot;: &quot;deserunt&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 5,&#xd;
    &quot;name&quot;: &quot;culpa&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 6,&#xd;
    &quot;name&quot;: &quot;koniec&quot;,&#xd;
    &quot;nodeType&quot;: &quot;EXIT&quot;,&#xd;
    &quot;outgoing&quot;: [],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">7070</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/greedy/nodes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Dfs" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;name&quot;: &quot;pariatur&quot;,&#xd;
    &quot;nodeType&quot;: &quot;ENTRY&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: []&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 1,&#xd;
    &quot;name&quot;: &quot;non&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 2,&#xd;
    &quot;name&quot;: &quot;cupidatat&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 3,&#xd;
    &quot;name&quot;: &quot;elit&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 4,&#xd;
    &quot;name&quot;: &quot;deserunt&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 5,&#xd;
    &quot;name&quot;: &quot;culpa&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 6,&#xd;
    &quot;name&quot;: &quot;koniec&quot;,&#xd;
    &quot;nodeType&quot;: &quot;EXIT&quot;,&#xd;
    &quot;outgoing&quot;: [],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">7070</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/dfs/nodes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bfs" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;name&quot;: &quot;pariatur&quot;,&#xd;
    &quot;nodeType&quot;: &quot;ENTRY&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: []&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 1,&#xd;
    &quot;name&quot;: &quot;non&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 1,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 2,&#xd;
    &quot;name&quot;: &quot;cupidatat&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 3,&#xd;
    &quot;name&quot;: &quot;elit&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 0,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 5&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 3,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 4,&#xd;
    &quot;name&quot;: &quot;deserunt&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 2,&#xd;
        &quot;value&quot;: 2&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 1,&#xd;
        &quot;to&quot;: 4,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 5,&#xd;
    &quot;name&quot;: &quot;culpa&quot;,&#xd;
    &quot;nodeType&quot;: &quot;REGULAR&quot;,&#xd;
    &quot;outgoing&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 3,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 7&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 5,&#xd;
        &quot;value&quot;: 3&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: 6,&#xd;
    &quot;name&quot;: &quot;koniec&quot;,&#xd;
    &quot;nodeType&quot;: &quot;EXIT&quot;,&#xd;
    &quot;outgoing&quot;: [],&#xd;
    &quot;incoming&quot;: [&#xd;
      {&#xd;
        &quot;from&quot;: 2,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 10&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 4,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 8&#xd;
      },&#xd;
      {&#xd;
        &quot;from&quot;: 5,&#xd;
        &quot;to&quot;: 6,&#xd;
        &quot;value&quot;: 4&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">localhost</stringProp>
              <stringProp name="HTTPSampler.port">7070</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/bfs/nodes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
